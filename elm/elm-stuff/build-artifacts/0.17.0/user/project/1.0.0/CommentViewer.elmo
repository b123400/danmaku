var _user$project$CommentViewer$view = function (_p0) {
	var _p1 = _p0;
	var _p2 = _p1._0;
	var commentDiv = F2(
		function (time, tween) {
			var comment = _user$project$CommentLayout$getComment(tween);
			return A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$style(
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Native_List.fromArray(
								[
									{
									ctor: '_Tuple2',
									_0: 'left',
									_1: A2(
										_elm_lang$core$Basics_ops['++'],
										_elm_lang$core$Basics$toString(
											_user$project$CommentLayout$getInitialX(tween)),
										'px')
								},
									{
									ctor: '_Tuple2',
									_0: 'top',
									_1: A2(
										_elm_lang$core$Basics_ops['++'],
										_elm_lang$core$Basics$toString(
											_user$project$CommentLayout$getY(tween)),
										'px')
								},
									{
									ctor: '_Tuple2',
									_0: 'transform',
									_1: A2(
										_elm_lang$core$Basics_ops['++'],
										'translateX(',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_elm_lang$core$Basics$toString(
												A2(_user$project$CommentLayout$xDeltaAtTime, tween, time)),
											'px)'))
								},
									{ctor: '_Tuple2', _0: 'position', _1: 'absolute'},
									{
									ctor: '_Tuple2',
									_0: 'width',
									_1: A2(
										_elm_lang$core$Basics_ops['++'],
										_elm_lang$core$Basics$toString(
											_user$project$Comment$getWidth(comment)),
										'px')
								},
									{
									ctor: '_Tuple2',
									_0: 'height',
									_1: A2(
										_elm_lang$core$Basics_ops['++'],
										_elm_lang$core$Basics$toString(
											_user$project$Comment$getHeight(comment)),
										'px')
								},
									{ctor: '_Tuple2', _0: 'display', _1: 'block'},
									{ctor: '_Tuple2', _0: 'background-color', _1: 'rgba(0, 1, 0, 0.3)'},
									{ctor: '_Tuple2', _0: 'overflow', _1: 'visible'}
								]),
							_user$project$Comment$styleAttributes(comment)))
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(
						_user$project$Comment$text(comment))
					]));
		});
	var visibleComments = A2(_user$project$CommentLayout$visibleDanmaku, _p2.currentTime, _p2.danmaku);
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[]),
				A2(
					_elm_lang$core$List$map,
					commentDiv(_p2.currentTime),
					visibleComments))
			]));
};
var _user$project$CommentViewer$slidingComments = _elm_lang$core$Native_Platform.incomingPort('slidingComments', _elm_lang$core$Json_Decode$value);
var _user$project$CommentViewer$setTime = _elm_lang$core$Native_Platform.incomingPort('setTime', _elm_lang$core$Json_Decode$value);
var _user$project$CommentViewer$setPlayState = _elm_lang$core$Native_Platform.incomingPort('setPlayState', _elm_lang$core$Json_Decode$bool);
var _user$project$CommentViewer$NoOps = {ctor: 'NoOps'};
var _user$project$CommentViewer$SetPlayState = function (a) {
	return {ctor: 'SetPlayState', _0: a};
};
var _user$project$CommentViewer$SetTime = function (a) {
	return {ctor: 'SetTime', _0: a};
};
var _user$project$CommentViewer$receiveExternalTime = function (value) {
	var result = A2(
		_elm_lang$core$Json_Decode$decodeValue,
		A3(
			_elm_lang$core$Json_Decode$tuple2,
			F2(
				function (v0, v1) {
					return {ctor: '_Tuple2', _0: v0, _1: v1};
				}),
			_elm_lang$core$Json_Decode$float,
			_elm_lang$core$Json_Decode$float),
		value);
	var _p3 = result;
	if (_p3.ctor === 'Err') {
		return A2(_elm_lang$core$Debug$log, _p3._0, _user$project$CommentViewer$NoOps);
	} else {
		return _user$project$CommentViewer$SetTime(
			{ctor: '_Tuple2', _0: _p3._0._0 * _elm_lang$core$Time$second, _1: _p3._0._1});
	}
};
var _user$project$CommentViewer$SystemTick = function (a) {
	return {ctor: 'SystemTick', _0: a};
};
var _user$project$CommentViewer$Resize = function (a) {
	return {ctor: 'Resize', _0: a};
};
var _user$project$CommentViewer$SetComments = function (a) {
	return {ctor: 'SetComments', _0: a};
};
var _user$project$CommentViewer$receiveComments = function (value) {
	var result = A2(_elm_lang$core$Json_Decode$decodeValue, _user$project$Comment$decodeList, value);
	var _p4 = result;
	if (_p4.ctor === 'Err') {
		return A2(
			_elm_lang$core$Debug$log,
			_p4._0,
			_user$project$CommentViewer$SetComments(
				_elm_lang$core$Native_List.fromArray(
					[])));
	} else {
		return _user$project$CommentViewer$SetComments(_p4._0);
	}
};
var _user$project$CommentViewer$subscriptions = function (_p5) {
	var _p6 = _p5;
	return _elm_lang$core$Platform_Sub$batch(
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$CommentViewer$slidingComments(_user$project$CommentViewer$receiveComments),
				_elm_lang$animation_frame$AnimationFrame$times(_user$project$CommentViewer$SystemTick),
				_elm_lang$window$Window$resizes(_user$project$CommentViewer$Resize),
				_user$project$CommentViewer$setTime(_user$project$CommentViewer$receiveExternalTime),
				_user$project$CommentViewer$setPlayState(_user$project$CommentViewer$SetPlayState)
			]));
};
var _user$project$CommentViewer$Model = function (a) {
	return {ctor: 'Model', _0: a};
};
var _user$project$CommentViewer$init = {
	ctor: '_Tuple2',
	_0: _user$project$CommentViewer$Model(
		{
			comments: _elm_lang$core$Native_List.fromArray(
				[]),
			danmaku: _elm_lang$core$Native_List.fromArray(
				[]),
			isPlaying: false,
			currentTime: 0,
			lastTick: 0,
			size: {width: 0, height: 0}
		}),
	_1: A3(_elm_lang$core$Task$perform, _elm_lang$core$Basics$identity, _user$project$CommentViewer$Resize, _elm_lang$window$Window$size)
};
var _user$project$CommentViewer$update = F2(
	function (msg, _p7) {
		var _p8 = _p7;
		var _p13 = _p8._0;
		var _p9 = msg;
		switch (_p9.ctor) {
			case 'SetComments':
				var _p10 = _p9._0;
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_user$project$CommentViewer$Model(
						_elm_lang$core$Native_Utils.update(
							_p13,
							{
								comments: _p10,
								danmaku: A2(
									_user$project$CommentLayout$danmaku,
									_elm_lang$core$Basics$toFloat(_p13.size.width),
									_p10)
							})),
					_elm_lang$core$Native_List.fromArray(
						[]));
			case 'Resize':
				var _p11 = _p9._0;
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_user$project$CommentViewer$Model(
						_elm_lang$core$Native_Utils.update(
							_p13,
							{
								size: _p11,
								danmaku: A2(
									_user$project$CommentLayout$danmaku,
									_elm_lang$core$Basics$toFloat(_p11.width),
									_p13.comments)
							})),
					_elm_lang$core$Native_List.fromArray(
						[]));
			case 'SystemTick':
				var _p12 = _p9._0;
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_user$project$CommentViewer$Model(
						_elm_lang$core$Native_Utils.update(
							_p13,
							{
								lastTick: _p12,
								currentTime: _p13.isPlaying ? (_p13.currentTime + (_p12 - _p13.lastTick)) : _p13.currentTime
							})),
					_elm_lang$core$Native_List.fromArray(
						[]));
			case 'SetTime':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_user$project$CommentViewer$Model(
						_elm_lang$core$Native_Utils.update(
							_p13,
							{currentTime: _p9._0._0, lastTick: _p9._0._1})),
					_elm_lang$core$Native_List.fromArray(
						[]));
			case 'SetPlayState':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_user$project$CommentViewer$Model(
						_elm_lang$core$Native_Utils.update(
							_p13,
							{isPlaying: _p9._0})),
					_elm_lang$core$Native_List.fromArray(
						[]));
			default:
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_user$project$CommentViewer$Model(_p13),
					_elm_lang$core$Native_List.fromArray(
						[]));
		}
	});
var _user$project$CommentViewer$main = {
	main: _elm_lang$html$Html_App$program(
		{init: _user$project$CommentViewer$init, update: _user$project$CommentViewer$update, subscriptions: _user$project$CommentViewer$subscriptions, view: _user$project$CommentViewer$view})
};
