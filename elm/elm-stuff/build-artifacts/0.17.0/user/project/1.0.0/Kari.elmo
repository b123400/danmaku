var _user$project$Kari$decodeCommentResponse = A2(_elm_lang$core$Json_Decode_ops[':='], 'comments', _user$project$Comment$decodeList);
var _user$project$Kari$getErrorMessage = function (error) {
	var _p0 = error;
	switch (_p0.ctor) {
		case 'Timeout':
			return 'Timeout';
		case 'NetworkError':
			return 'Network Error';
		case 'UnexpectedPayload':
			return A2(_elm_lang$core$String$append, 'Unexpected Payload', _p0._0);
		default:
			return A2(
				_elm_lang$core$String$join,
				',',
				_elm_lang$core$Native_List.fromArray(
					[
						'BadResponse',
						_elm_lang$core$Basics$toString(_p0._0),
						_p0._1
					]));
	}
};
var _user$project$Kari$getUrl = F2(
	function (anilistId, filename) {
		return A2(
			_evancz$elm_http$Http$url,
			'/api/comments',
			_elm_lang$core$Native_List.fromArray(
				[
					{
					ctor: '_Tuple2',
					_0: 'anilist_id',
					_1: _elm_lang$core$Basics$toString(anilistId)
				},
					{ctor: '_Tuple2', _0: 'filename', _1: filename},
					{ctor: '_Tuple2', _0: 'source', _1: 'kari'}
				]));
	});
var _user$project$Kari$getComments = F2(
	function (anilistId, filename) {
		return A2(
			_elm_lang$core$Task$mapError,
			_user$project$Kari$getErrorMessage,
			A2(
				_evancz$elm_http$Http$get,
				_user$project$Kari$decodeCommentResponse,
				A2(_user$project$Kari$getUrl, anilistId, filename)));
	});
