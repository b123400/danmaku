var _user$project$CommentLayout$minimumY = function (currHeight) {
	var suggestedY = F2(
		function (_p0, curr) {
			var _p1 = _p0;
			var _p3 = _p1._0;
			var _p2 = _p1._1;
			return (((_elm_lang$core$Native_Utils.cmp(_p3, curr) > 0) && (_elm_lang$core$Native_Utils.cmp(_p3, curr + currHeight) < 0)) || ((_elm_lang$core$Native_Utils.cmp(_p3, curr) < 1) && (_elm_lang$core$Native_Utils.cmp(_p3 + _p2, curr) > -1))) ? (_p3 + _p2) : curr;
		});
	return A2(_elm_lang$core$List$foldl, suggestedY, 0);
};
var _user$project$CommentLayout$speed = F2(
	function (containerWidth, c) {
		return (0 - (100 + (_user$project$Comment$getWidth(c) * 0.4))) / _elm_lang$core$Time$second;
	});
var _user$project$CommentLayout$duration = F2(
	function (containerWidth, c) {
		var width = _user$project$Comment$getWidth(c);
		return (width + containerWidth) / _elm_lang$core$Basics$abs(
			A2(_user$project$CommentLayout$speed, containerWidth, c));
	});
var _user$project$CommentLayout$startTime = _user$project$Comment$time;
var _user$project$CommentLayout$endTime = F2(
	function (containerWidth, c) {
		return _user$project$CommentLayout$startTime(c) + A2(_user$project$CommentLayout$duration, containerWidth, c);
	});
var _user$project$CommentLayout$touchEdgeTime = F2(
	function (containerWidth, c) {
		return _user$project$CommentLayout$startTime(c) + (containerWidth / _elm_lang$core$Basics$abs(
			A2(_user$project$CommentLayout$speed, containerWidth, c)));
	});
var _user$project$CommentLayout$xDeltaAtTime = F2(
	function (_p4, t) {
		var _p5 = _p4;
		var _p6 = _p5._0;
		var localTime = t - _user$project$CommentLayout$startTime(_p6.comment);
		var s = A2(_user$project$CommentLayout$speed, _p6.containerWidth, _p6.comment);
		return s * localTime;
	});
var _user$project$CommentLayout$visibleDanmaku = function (time) {
	var isVisible = function (_p7) {
		var _p8 = _p7;
		var _p9 = _p8._0;
		return (_elm_lang$core$Native_Utils.cmp(
			_user$project$CommentLayout$startTime(_p9.comment),
			time) < 1) && (_elm_lang$core$Native_Utils.cmp(
			A2(_user$project$CommentLayout$endTime, _p9.containerWidth, _p9.comment),
			time) > -1);
	};
	return _elm_lang$core$List$filter(isVisible);
};
var _user$project$CommentLayout$getInitialX = function (_p10) {
	var _p11 = _p10;
	return _p11._0.initialX;
};
var _user$project$CommentLayout$getLazyYRange = function (_p12) {
	var _p13 = _p12;
	var _p14 = _p13._0;
	var height = _user$project$Comment$getHeight(_p14.comment);
	return A2(
		_elm_lang$lazy$Lazy$map,
		function (y) {
			return {ctor: '_Tuple2', _0: y, _1: height};
		},
		_p14.y);
};
var _user$project$CommentLayout$getY = function (_p15) {
	var _p16 = _p15;
	return _elm_lang$lazy$Lazy$force(_p16._0.y);
};
var _user$project$CommentLayout$getComment = function (_p17) {
	var _p18 = _p17;
	return _p18._0.comment;
};
var _user$project$CommentLayout$willCollideX = F2(
	function (curr, tween) {
		var containerWidth = function (_p19) {
			var _p20 = _p19;
			return _p20._0.containerWidth;
		}(tween);
		var prev = _user$project$CommentLayout$getComment(tween);
		return (_elm_lang$core$Native_Utils.cmp(
			A2(_user$project$CommentLayout$endTime, containerWidth, prev),
			A2(_user$project$CommentLayout$touchEdgeTime, containerWidth, curr)) > 0) || (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$Basics$abs(
				A2(
					_user$project$CommentLayout$xDeltaAtTime,
					tween,
					_user$project$Comment$time(curr))),
			_user$project$Comment$getWidth(prev)) < 0);
	});
var _user$project$CommentLayout$CommentTween = function (a) {
	return {ctor: 'CommentTween', _0: a};
};
var _user$project$CommentLayout$appendComment = F3(
	function (containerWidth, comment, danmaku) {
		var lazyY = A2(
			_elm_lang$lazy$Lazy$map,
			_user$project$CommentLayout$minimumY(
				_user$project$Comment$getHeight(comment)),
			A2(
				_elm_lang$lazy$Lazy$map,
				_elm_lang$core$List$sortBy(_elm_lang$core$Basics$fst),
				_user$project$LazyUtil$collect(
					A2(
						_elm_lang$core$List$map,
						_user$project$CommentLayout$getLazyYRange,
						A2(
							_elm_lang$core$List$filter,
							_user$project$CommentLayout$willCollideX(comment),
							A2(
								_user$project$CommentLayout$visibleDanmaku,
								_user$project$Comment$time(comment),
								danmaku))))));
		var tween = _user$project$CommentLayout$CommentTween(
			{comment: comment, y: lazyY, initialX: containerWidth, containerWidth: containerWidth});
		return A2(
			_elm_lang$core$Basics_ops['++'],
			danmaku,
			_elm_lang$core$Native_List.fromArray(
				[tween]));
	});
var _user$project$CommentLayout$danmaku = function (containerWidth) {
	return A2(
		_elm_lang$core$List$foldl,
		_user$project$CommentLayout$appendComment(containerWidth),
		_elm_lang$core$Native_List.fromArray(
			[]));
};
