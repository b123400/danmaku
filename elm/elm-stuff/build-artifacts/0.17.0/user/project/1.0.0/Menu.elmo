var _user$project$Menu$selectedText = function (source) {
	var _p0 = source;
	if (_p0.ctor === 'Kari') {
		return 'kari';
	} else {
		return 'None';
	}
};
var _user$project$Menu$comments = _elm_lang$core$Native_Platform.outgoingPort(
	'comments',
	function (v) {
		return v;
	});
var _user$project$Menu$sendComments = function (_p1) {
	return _user$project$Menu$comments(
		_user$project$Comment$encodeList(_p1));
};
var _user$project$Menu$flags = _elm_lang$core$Native_Platform.incomingPort(
	'flags',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		A2(_elm_lang$core$Json_Decode_ops[':='], 'anilistId', _elm_lang$core$Json_Decode$int),
		function (anilistId) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				A2(_elm_lang$core$Json_Decode_ops[':='], 'filename', _elm_lang$core$Json_Decode$string),
				function (filename) {
					return _elm_lang$core$Json_Decode$succeed(
						{anilistId: anilistId, filename: filename});
				});
		}));
var _user$project$Menu$Flags = F2(
	function (a, b) {
		return {anilistId: a, filename: b};
	});
var _user$project$Menu$SetComments = function (a) {
	return {ctor: 'SetComments', _0: a};
};
var _user$project$Menu$loadComment = F3(
	function (source, anilistId, filename) {
		var success = function (a) {
			return _user$project$Menu$SetComments(a);
		};
		var fail = function (error) {
			return A2(
				_elm_lang$core$Debug$log,
				error,
				_user$project$Menu$SetComments(
					_elm_lang$core$Native_List.fromArray(
						[])));
		};
		var task = function () {
			var _p2 = source;
			if (_p2.ctor === 'None') {
				return _elm_lang$core$Task$succeed(
					_elm_lang$core$Native_List.fromArray(
						[]));
			} else {
				return A2(_user$project$Kari$getComments, anilistId, filename);
			}
		}();
		return A3(_elm_lang$core$Task$perform, fail, success, task);
	});
var _user$project$Menu$SwitchSource = function (a) {
	return {ctor: 'SwitchSource', _0: a};
};
var _user$project$Menu$SetFlags = function (a) {
	return {ctor: 'SetFlags', _0: a};
};
var _user$project$Menu$subscriptions = function (_p3) {
	return _user$project$Menu$flags(_user$project$Menu$SetFlags);
};
var _user$project$Menu$None = {ctor: 'None'};
var _user$project$Menu$Kari = {ctor: 'Kari'};
var _user$project$Menu$switcher = A2(
	_elm_lang$html$Html$div,
	_elm_lang$core$Native_List.fromArray(
		[]),
	_elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_lang$html$Html$button,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Events$onClick(
					_user$project$Menu$SwitchSource(_user$project$Menu$Kari))
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html$text('kari')
				])),
			A2(
			_elm_lang$html$Html$button,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Events$onClick(
					_user$project$Menu$SwitchSource(_user$project$Menu$None))
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html$text('none')
				]))
		]));
var _user$project$Menu$view = function (_p4) {
	var _p5 = _p4;
	var _p6 = _p5._0;
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(
						_user$project$Menu$selectedText(_p6.source))
					])),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(
						A2(
							_elm_lang$core$String$join,
							',',
							A2(_elm_lang$core$List$map, _user$project$Comment$text, _p6.comments)))
					])),
				_user$project$Menu$switcher
			]));
};
var _user$project$Menu$Model = function (a) {
	return {ctor: 'Model', _0: a};
};
var _user$project$Menu$init = function (flags) {
	return {
		ctor: '_Tuple2',
		_0: _user$project$Menu$Model(
			{
				source: _user$project$Menu$Kari,
				comments: _elm_lang$core$Native_List.fromArray(
					[]),
				flags: flags
			}),
		_1: _elm_lang$core$Platform_Cmd$none
	};
};
var _user$project$Menu$update = F2(
	function (msg, _p7) {
		var _p8 = _p7;
		var _p12 = _p8._0;
		var _p9 = msg;
		switch (_p9.ctor) {
			case 'SetFlags':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_user$project$Menu$Model(
						_elm_lang$core$Native_Utils.update(
							_p12,
							{flags: _p9._0})),
					_elm_lang$core$Native_List.fromArray(
						[]));
			case 'SwitchSource':
				var _p10 = _p9._0;
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_user$project$Menu$Model(
						_elm_lang$core$Native_Utils.update(
							_p12,
							{source: _p10})),
					_elm_lang$core$Native_List.fromArray(
						[
							A3(_user$project$Menu$loadComment, _p10, _p12.flags.anilistId, _p12.flags.filename),
							A3(
							_elm_lang$core$Task$perform,
							_elm_lang$core$Basics$identity,
							_elm_lang$core$Basics$identity,
							_elm_lang$core$Task$succeed(
								_user$project$Menu$SetComments(
									_elm_lang$core$Native_List.fromArray(
										[]))))
						]));
			default:
				var _p11 = _p9._0;
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_user$project$Menu$Model(
						_elm_lang$core$Native_Utils.update(
							_p12,
							{comments: _p11})),
					_elm_lang$core$Native_List.fromArray(
						[
							_user$project$Menu$sendComments(_p11)
						]));
		}
	});
var _user$project$Menu$main = {
	main: _elm_lang$html$Html_App$programWithFlags(
		{init: _user$project$Menu$init, update: _user$project$Menu$update, subscriptions: _user$project$Menu$subscriptions, view: _user$project$Menu$view}),
	flags: A2(
		_elm_lang$core$Json_Decode$andThen,
		A2(_elm_lang$core$Json_Decode_ops[':='], 'anilistId', _elm_lang$core$Json_Decode$int),
		function (anilistId) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				A2(_elm_lang$core$Json_Decode_ops[':='], 'filename', _elm_lang$core$Json_Decode$string),
				function (filename) {
					return _elm_lang$core$Json_Decode$succeed(
						{anilistId: anilistId, filename: filename});
				});
		})
};
